database:
  type: postgresql
  wal: true
  url: vaultwarden-postgres-rw.vaultwarden.svc.cluster.local
  existingSecret: vaultwarden-postgres-app
  existingSecretKey: uri
vaultwarden:
  allowSignups: true
  verifySignup: false
  requireEmail: false
  allowInvitation: true
  showPasswordHint: false
  enableWebsockets: true
  enableWebVault: true
  enableSends: true
  orgCreationUsers: all

  admin:
    enabled: false
    disableAdminToken: false
  
  emergency:
    enabled: true

  smtp:
    enabled: false
    host: ""
    from: ""
    security: starttls

  yubico:
    enabled: false

  log:
    file: ""
    level: ""

  icons:
    disableDownload: false

  push:
    enabled: false

service:
  type: ClusterIP
  httpPort: 80
  websocketPort: 3012
  externalTrafficPolicy: Cluster
  nodePorts:
    http: ""
    websocket: ""

ingress:
  enabled: true
  annotations:
    traefik.ingress.kubernetes.io/router.tls: 'true'
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.middlewares: default-redirect-https@kubernetescrd
  hosts:
    - host: vaultwarden.stenz.dev
      paths:
        - '/'
  tls:
    - secretName: vaultwarden-tls
      hosts:
        - vaultwarden.stenz.dev
ingressRoute:
  enabled: false
  newCRD: false
  host: ""
  entrypoints:
    - websecure
  middlewares: {}
  tls: {}

persistence:
  enabled: false
  size: 1Gi
  accessMode: ReadWriteOnce


customVolume: {}


image:
  pullPolicy: IfNotPresent
  repository: vaultwarden/server
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

replicaCount: 1

serviceAccount:
  create: false
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

deploymentAnnotations: {}
probes: {}

sidecars: []

podSecurityContext:
  fsGroup: 65534

securityContext:
  runAsUser: 65534
  runAsGroup: 65534

strategy: {}

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}
